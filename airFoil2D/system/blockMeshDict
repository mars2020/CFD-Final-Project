/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     |                                                 |
|   \\  /    A nd           | Copyright (C) 2018 Ehsan Madadi-Kandjani        |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format    ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //











// Returns a zero array


// Returns a zero array with commas in the middle of it


// Returns a linear  array with commas (initial point, last point, number of segments, c)

  
// Returns a y_t with commas (arrayX, number of segments, t, c)


// Returns a y_c with commas (arrayX, number of segments, m, p, c)


// Returns a theta with commas (arrayX, number of segments, m, p, c)

      
// Returns a xu with commas (arrayX, arrayYt, arrayTheta, number of segments)


// Returns a yu with commas (arrayYc, arrayYt, arrayTheta, number of segments)

      
// Returns a xl with commas (arrayX, arrayYt, arrayTheta, number of segments)


// Returns a yl with commas (arrayYc, arrayYt, arrayTheta, number of segments)

      
// Include angle of attack (arrayXu, arrayYu, alpha, number of segments)

      

      
// Include angle of attack (arrayXl, arrayYl, alpha, number of segments)

      

      
// Xu with comma to obtain Cmax (arrayXu, arrayYu, alpha, number of segments)



      
// Include angle of attack (arrayXl, arrayYl, alpha, number of segments)

      

      
// Returns the index of maximum array (Yc, Yt, p, number of segments)

      

      


      
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1.0;

//NACA airfoil geometry

//Chord length


//Angle of attack (in radian)


//NACA digits





//Mesh

//Height of mesh in y direction


//Length of downstream


//Foil depth in z direction perpendicular to x-y surface


//Scale factor (the mesh is normalized to have chord length equal to one)


//Number of cells and points at each direction and element

//Number of cells in y direction


//Number of cells in downstream


//Number of cells in z direction


//Number of meshes on the front part of airfoil edges p8-p9 and p8-p10b


//Number of meshes on the back part of airfoil edges p9-p11 and p10-p11


//Number of interpolation points along the airfoil for defining the splines


//Cell expansion ratios

//Expansion ratio in y direction


//Expansion ratio in downstream side


//Expansion ratio in inlet


// Base z


// Depth of airfoil


// Front z


// m,p, and t values for the airfoil




// Calculate x array


// Calculate yt array


// Calculate camber


// Calculate theta


// Calculate upper surface x components


// Calculate upper surface y components


// Calculate lower surface x components


// Calculate lower surface y components







// define Cmax


// Move the airfoil





























//Define the points for the inlet arc allocation


















// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //



// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

vertices
(
    (-7.30095814906018 2.25845101238709 0) // Vertex p00b = 0 
    (0.325613509151458 -8 0) // Vertex p01b = 1 
    (0.955864666885585 -8 0) // Vertex p02b = 2 
    (16.0 -8 0) // Vertex p03b = 3 
    (16.0 -0.296664159568525 0) // Vertex p04b = 4 
    (16.0 8.0 0) // Vertex p05b = 5 
    (0.955864666885585 8.0 0) // Vertex p06b = 6 
    (0.357710364708721 8.0 0) // Vertex p07b = 7 
    (0 0 0) // Vertex p08b = 8 
    (0.357710364708721 -0.00722345669576194 0) // Vertex p09b = 9 
    (0.325613509151458 -0.121968301347072 0) // Vertex p10b = 10 
    (0.955864666885585 -0.296664159568525 0) // Vertex p11b = 11 
    
    (-7.30095814906018 2.25845101238709 0.01) // Vertex p00t = 12 
    (0.325613509151458 -8 0.01) // Vertex p01t = 13 
    (0.955864666885585 -8 0.01) // Vertex p02t = 14 
    (16.0 -8 0.01) // Vertex p03t = 15 
    (16.0 -0.296664159568525 0.01) // Vertex p04t = 16 
    (16.0 8.0 0.01) // Vertex p05t = 17 
    (0.955864666885585 8.0 0.01) // Vertex p06t = 18 
    (0.357710364708721 8.0 0.01) // Vertex p07t = 19 
    (0 0 0.01) // Vertex p08t = 20 
    (0.357710364708721 -0.00722345669576194 0.01) // Vertex p09t = 21 
    (0.325613509151458 -0.121968301347072 0.01) // Vertex p10t = 22 
    (0.955864666885585 -0.296664159568525 0.01) // Vertex p11t = 23 
);

blocks
(
    //B0
    hex (0 1 10 8 12 13 22 20)
    square
    (100 20 1)
    simpleGrading (1 1 1)
    
    //B1
    hex (1 2 11 10 13 14 23 22)
    square
    (70 20 1)
    simpleGrading (1 1 1)
    
    //B2
    hex (2 3 4 11 14 15 16 23)
    square
    (75 20 1)
    simpleGrading (1 1 1)
    
    //B3
    hex (11 4 5 6 23 16 17 18)
    square
    (75 20 1)
    simpleGrading (1 1 1)
    
    //B4
    hex (9 11 6 7 21 23 18 19)
    square
    (70 20 1)
    simpleGrading (1 1 1)
    
    //B5
    hex (8 9 7 0 20 21 19 12)
    square
    (100 20 1)
    simpleGrading (1 1 1)
);

edges
(
    //Inlet arc
    arc 0 7 (-5.29914388478366 5.65685424949238 0)
    arc 0 1 (-5.29914388478366 -5.65685424949238 0)

    arc 12 19 (-5.29914388478366 5.65685424949238 0.01)
    arc 12 13 (-5.29914388478366 -5.65685424949238 0.01)
    
    //Airfoil surface spline
    spline 8 10 
             (( 0.0218252241417498 -0.0284232437735932 0 ) ( 0.0893651090990629 -0.0576915579422165 0 ) ( 0.194289456849682 -0.0881991429603231 0 ))
         
      
    spline 10 11 
             (( 0.472396016093543 -0.16082382106693 0 ) ( 0.620689823089542 -0.200427476199751 0 ) ( 0.754998882090013 -0.23777920756602 0 ) ( 0.862005793583584 -0.268856894010771 0 ) ( 0.930978819537538 -0.289459962415704 0 ))
         
      
    spline 8 9 
             (( 0.0277365409061503 0.0230248951897838 0 ) ( 0.103028423151737 0.0333871488622285 0 ) ( 0.21760100441326 0.0248506472626524 0 ))
         
      
    spline 9 11 
             (( 0.505925377994612 -0.0603924364401953 0 ) ( 0.64924967175929 -0.12373802519319 0 ) ( 0.775322950838436 -0.187954675784043 0 ) ( 0.873140564770431 -0.243352967967998 0 ) ( 0.934825839715134 -0.281009467188153 0 ))
         
      
    
    spline 20 22 
             (( 0.0218252241417498 -0.0284232437735932 0.01 ) ( 0.0893651090990629 -0.0576915579422165 0.01 ) ( 0.194289456849682 -0.0881991429603231 0.01 ))
         
      
    spline 22 23 
             (( 0.472396016093543 -0.16082382106693 0.01 ) ( 0.620689823089542 -0.200427476199751 0.01 ) ( 0.754998882090013 -0.23777920756602 0.01 ) ( 0.862005793583584 -0.268856894010771 0.01 ) ( 0.930978819537538 -0.289459962415704 0.01 ))
         
      
    spline 20 21 
             (( 0.0277365409061503 0.0230248951897838 0.01 ) ( 0.103028423151737 0.0333871488622285 0.01 ) ( 0.21760100441326 0.0248506472626524 0.01 ))
         
      
    spline 21 23 
             (( 0.505925377994612 -0.0603924364401953 0.01 ) ( 0.64924967175929 -0.12373802519319 0.01 ) ( 0.775322950838436 -0.187954675784043 0.01 ) ( 0.873140564770431 -0.243352967967998 0.01 ) ( 0.934825839715134 -0.281009467188153 0.01 ))
         
      
    
);

patches
(
    wall airfoil
    (
        (8 10 22 20)
        (10 11 23 22)
        (8 9 21 20)
        (9 11 23 21)
    )
    
    patch farBoundaries
    (
        (6 7 19 18)
        (5 6 18 17)
        (2 3 15 14)
        (1 2 14 13)
    )
    
    patch inlet
    (
        (7 0 12 19)
        (0 1 13 12)
    )
    
    patch outlet
    (
        (4 5 17 16)
        (3 4 16 15)
    )
);

mergePatchPairs
(
);
